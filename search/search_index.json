{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"examples/configuration/","title":"Configurations","text":""},{"location":"examples/configuration/#without-initializing-a-git-repository","title":"Without initializing a git repository","text":"<pre><code>general:\n  slug: python-project\n  source_name: src\n  description: Python Project Description\n  version: \"0.1.0\"\n  author: John Doe\n  license: MIT\n  python_version: \"3.13\"\n  dependency_manager: uv\ngit:\n  initialize: false\ndependencies:\ntemplate:\n  name: standard_project\n</code></pre>"},{"location":"examples/configuration/#initializing-a-git-repository","title":"Initializing a git repository","text":"<pre><code>general:\n  slug: python-project\n  source_name: src\n  description: Python Project Description\n  version: \"0.1.0\"\n  author: John Doe\n  license: MIT\n  python_version: \"3.13\"\n  dependency_manager: uv\ngit:\n  initialize: true\n  username: johndoe\n  email: johndoe@gmail.com\ndependencies:\ntemplate:\n  name: standard_project\n</code></pre>"},{"location":"examples/configuration/#domain-driven-design-without-specifying-bounded-context","title":"Domain Driven Design without specifying bounded context","text":"<pre><code>general:\n  slug: python-project\n  source_name: src\n  description: Python Project Description\n  version: \"0.1.0\"\n  author: John Doe\n  license: MIT\n  python_version: \"3.13\"\n  dependency_manager: uv\ngit:\n  initialize: true\n  username: johndoe\n  email: johndoe@gmail.com\ndependencies:\ntemplate:\n  name: domain_driven_design\n  specify_bounded_context: false\n</code></pre>"},{"location":"examples/configuration/#domain-driven-design-specifying-bounded-context","title":"Domain Driven Design specifying bounded context","text":"<pre><code>general:\n  slug: python-project\n  source_name: src\n  description: Python Project Description\n  version: \"0.1.0\"\n  author: John Doe\n  license: MIT\n  python_version: \"3.13\"\n  dependency_manager: uv\ngit:\n  initialize: true\n  username: johndoe\n  email: johndoe@gmail.com\ndependencies:\ntemplate:\n  name: domain_driven_design\n  specify_bounded_context: true\n  bounded_context: backoffice\n  aggregate_name: user\n</code></pre>"},{"location":"examples/configuration/#selecting-built-in-features","title":"Selecting built-in features","text":"<pre><code>general:\n  slug: python-project\n  source_name: src\n  description: Python Project Description\n  version: \"0.1.0\"\n  author: John Doe\n  license: MIT\n  python_version: \"3.13\"\n  dependency_manager: uv\ngit:\n  initialize: true\n  username: johndoe\n  email: johndoe@gmail.com\ndependencies:\ntemplate:\n  name: clean_architecture\n  built_in_features:\n    - value_objects\n    - github_actions\n    - makefile\n</code></pre>"},{"location":"examples/configuration/#installing-dependencies","title":"Installing dependencies","text":"<pre><code>general:\n  slug: python-project\n  source_name: src\n  description: Python Project Description\n  version: \"0.1.0\"\n  author: John Doe\n  license: MIT\n  python_version: \"3.13\"\n  dependency_manager: uv\ngit:\n  initialize: true\n  username: johndoe\n  email: johndoe@gmail.com\ndependencies:\n  - name: ty\n    version: latest\n    is_dev: true\n    group: lint\n  - name: pytest\n    version: latest\n    is_dev: true\n    group: test\n  - name: fastapi\n    version: latest\ntemplate:\n  name: standard_project\n  built_in_features:\n    - value_objects\n    - github_actions\n    - makefile\n</code></pre>"},{"location":"examples/custom_template/","title":"Custom Template","text":"<p>Let's imagine that you want to create a new project using a custom template with Cockburn-style Hexagonal Architecture, including a gitignore, README and mypy configuration files. You can create a yaml file with the following content:</p> <pre><code>- name: src\n  type: directory\n  python: True\n  children:\n    - name: driven_adapters\n      type: directory\n      python: True\n      children:\n        - name: adapter_for_paying_spy\n          type: file\n          extension: .py\n        - name: adapter_for_obtaining_grates_stub\n          type: file\n          extension: .py\n    - name: driving_adapters\n      type: directory\n      python: True\n      children:\n        - name: adapter_for_checking_cars_test\n          type: file\n          extension: .py\n    - name: tax_calculator_app\n      type: directory\n      python: True\n      children:\n        - name: driven_ports\n          type: directory\n          python: True\n          children:\n            - name: for_paying\n              type: file\n              extension: .py\n        - name: driving_ports\n          type: directory\n          python: True\n          children:\n            - name: for_checking_cars\n              type: file\n              extension: .py\n        - name: tax_calculator\n          type: directory\n          python: True\n- name: .gitignore\n  type: file\n- name: README\n  type: file\n  extension: .md\n- name: mypy\n  type: file\n  extension: .ini\n</code></pre>"},{"location":"guide/command_config/","title":"Config","text":"<p><code>instant-python</code> relies on a YAML file to know how your project should be generated. The <code>config</code> command walks  you through an interactive wizard and produces this file for you.</p> <pre><code>ipy config\n</code></pre> <p>Running it will create an ipy.yml file in the current directory containing all your answers.  Later this file can be used with the <code>init</code> command.</p>"},{"location":"guide/command_config/#file-format","title":"File format","text":"<p>The configuration file contains four top level keys:</p> <ul> <li>general \u2013 project information</li> <li>dependencies \u2013 packages that must be installed</li> <li>git \u2013 repository settings</li> <li>template \u2013 project structure and built\u2011in features</li> </ul> <p>Warning</p> <p>These keys are all required, if any of them is missing, the command will raise an error.</p>"},{"location":"guide/command_config/#restrictions","title":"Restrictions","text":"<p>The configuration file has some restrictions that vary depending on the section.</p>"},{"location":"guide/command_config/#general","title":"General","text":"<ul> <li>All the fields in the <code>general</code> section are required.</li> <li>The <code>slug</code> of the project cannot contain spaces or special characters, it must fulfill toml specifications.</li> <li>The <code>license</code> field must one of the following values: <code>MIT</code>, <code>Apache</code> or <code>GPL</code>. These are the more popular licenses, but you can use any other license changing the <code>LICENSE</code> file later.</li> <li>The <code>python_version</code> must be one of the following values: <code>3.10</code>, <code>3.11</code>, <code>3.12</code> or <code>3.13</code>.    This is the version that will be used to create the virtual environment and install the dependencies.</li> <li>The <code>dependency_manager</code> must be either <code>uv</code> of <code>pdm</code>. These are the two supported dependency managers that we found more useful. Future versions may support more dependency managers.</li> </ul>"},{"location":"guide/command_config/#dependencies","title":"Dependencies","text":"<ul> <li>If you don't want to install any dependencies, you can leave the <code>dependencies</code> section empty. But it's important to keep the section in the file.</li> <li>If a dependency is specified, the <code>name</code> and <code>version</code> fields are required.</li> <li>Only dependencies marked as development dependencies can be assigned to a <code>group</code>. Otherwise, the command will raise an error.</li> </ul>"},{"location":"guide/command_config/#git","title":"Git","text":"<ul> <li>The <code>initialize</code> field is required, and must be either <code>true</code> or <code>false</code>.</li> <li>If <code>initialize</code> is set to <code>true</code>, the <code>username</code> and <code>email</code> fields must be provided.</li> </ul>"},{"location":"guide/command_config/#template","title":"Template","text":"<ul> <li>The <code>name</code> field is required, and must be one of the available templates: <code>standard</code>, <code>domain_driven_design</code>, <code>clean_architecture</code> or <code>custom</code>.</li> <li>When the template is <code>domain_driven_design</code> is it possible to specify the name for a <code>bounded_context</code> and its <code>aggregate_root</code>. If any of these fields is specified for other templates, the command will raise an error.</li> <li>The <code>built_in_features</code> field is optional, but if specified, it must be a list of features that are available in the template. The list of available features can be found in the out-of-the-box section.</li> </ul>"},{"location":"guide/command_init/","title":"Init","text":"<p>Use the <code>init</code> command to turn a configuration file into a ready to use project.</p> <pre><code>ipy init\n</code></pre> <p>By default <code>instant-python</code> will look for ipy.yml in the current directory. A different file can be provided with <code>--config</code> or <code>-c</code> flags. </p> <p>Additionally, a custom template for your project structure can be used, you tell <code>ipy</code> to use that template with the <code>--template</code> or <code>-t</code> flag and providing the path to the template file.</p> <pre><code>ipy init -t /path/to/template.yml\n</code></pre> <p>Important</p> <p>When using a custom template, the possibility of using out-of-the-box implementations is not available. The custom template will only create the folder structure and files defined in it.</p>"},{"location":"guide/command_init/#overview","title":"Overview","text":"<p>The command performs the following steps:</p> <ol> <li>Creates the project folder structure based on the selected template or your custom template.</li> <li>Only when the template is not custom, writes boilerplate code for any built\u2011in features enabled in the configuration.</li> <li>Sets up the chosen dependency manager and installs dependencies under the selected Python version.</li> <li>Initializes a git repository if requested and configures your username and email.</li> <li>Moves the configuration file inside the new project folder for future reference.</li> </ol>"},{"location":"guide/command_init/#configuring-a-dependency-manager","title":"Configuring a dependency manager","text":"<p>Choose between two of the most popular dependencies and project manager for Python:</p> <ul> <li>uv</li> <li>pdm</li> </ul> <p>Instant Python will automatically download the selected dependency manager and create a virtual environment. This will allow you to install your dependencies and run tasks out of the box.</p>"},{"location":"guide/command_init/#creating-a-git-repository","title":"Creating a git repository","text":"<p>You will be able to configure your project as a git repository automatically. Instant Python will use the <code>username</code> and <code>email</code> fields from the configuration file to set up your git identity.</p> <p>If you choose to create a git repository, it will create a README.md file and the .gitignore file configured for Python projects.</p>"},{"location":"guide/command_init/#default-templates","title":"Default templates","text":"<p>There are some project templates already configured that you can use to create your project. These templates will create the folder structure of your project following a specific pattern.</p> <p>Important</p> <p>These templates do not reflect your architecture, but the folder structure of your project. There is a key difference between these concepts.</p>"},{"location":"guide/command_init/#domain-driven-design","title":"Domain Driven Design","text":"<p>Follows DDD pattern and screaming architecture organization.</p> <p>Separates the source code and test folder in bounded contexts and aggregates. Each aggregate will contain the known domain, application and infra layers. This template will allow you to create your first bounded context and aggregate.</p> <pre><code>\u251c\u2500\u2500 src\n\u2502  \u251c\u2500\u2500 bounded_context_name\n\u2502  \u2502  \u2514\u2500\u2500 aggregate_name\n\u2502  \u2502  \u2502  \u251c\u2500\u2500 application\n\u2502  \u2502  \u2502  \u251c\u2500\u2500 domain\n\u2502  \u2502  \u2502  \u2514\u2500\u2500 infra\n\u2502  \u2502  \u2514\u2500\u2500 shared\n\u2502  \u251c\u2500\u2500 shared\n\u2502  \u2514\u2500\u2500 delivery\n\u2502     \u2514\u2500\u2500 api\n\u2514\u2500\u2500 tests\n   \u251c\u2500\u2500 bounded_context_name\n   \u2502  \u2514\u2500\u2500 aggregate_name\n   \u2502  \u2502  \u251c\u2500\u2500 application\n   \u2502  \u2502  \u251c\u2500\u2500 domain\n   \u2502  \u2502  \u2514\u2500\u2500 infra\n   \u2502  \u2514\u2500\u2500 shared\n   \u251c\u2500\u2500 shared\n   \u2514\u2500\u2500 delivery\n      \u2514\u2500\u2500 api\n</code></pre>"},{"location":"guide/command_init/#clean-architecture","title":"Clean Architecture","text":"<p>Will create your folders following the clean architecture pattern.</p> <p>Separates the source code and test folder in domain, application, infrastructure and delivery layers.</p> <pre><code>\u251c\u2500\u2500 src\n\u2502  \u251c\u2500\u2500 application\n\u2502  \u251c\u2500\u2500 domain\n\u2502  \u251c\u2500\u2500 infra\n\u2502  \u2514\u2500\u2500 delivery\n\u2502     \u2514\u2500\u2500 api\n\u2514\u2500\u2500 tests\n   \u251c\u2500\u2500 acceptance\n   \u251c\u2500\u2500 unit\n   \u2514\u2500\u2500 integration\n</code></pre>"},{"location":"guide/command_init/#standard-project","title":"Standard project","text":"<p>Will create your project with the common pattern of source code and test folder.</p> <pre><code>\u251c\u2500\u2500 src\n\u2514\u2500\u2500 tests\n</code></pre>"},{"location":"guide/command_init/#out-of-the-box-implementations","title":"Out-of-the-box implementations","text":"<p>When creating a new project, you will be able to include some boilerplate and implementation code that will help you to start your project.</p> <p>Tip</p> <p>These implementations are completely subjective and personal. This does not mean that you must implement them in the same way or that they are the best way to implement them. You can use them as a starting point and iterate them as you need.</p> <p>Warning</p> <p>These implementations are only available when using one of the default templates.</p>"},{"location":"guide/command_init/#value-objects-and-exceptions","title":"Value objects and exceptions","text":"<p>Value objects are a common pattern to encapsulate primitives and encapsulate domain logic. If you choose this option, it will include the following value objects:</p> <p>A base class for all aggregates of your project with some common methods and utilities.</p> Aggregate <pre><code>class Aggregate(ABC):\n    @abstractmethod\n    def __init__(self) -&gt; None:\n        raise NotImplementedError\n\n    @override\n    def __repr__(self) -&gt; str:\n        attributes = []\n        for key, value in sorted(self._to_dict().items()):\n            attributes.append(f\"{key}={value!r}\")\n\n        return f\"{self.__class__.__name__}({', '.join(attributes)})\"\n\n    @override\n    def __eq__(self, other: Self) -&gt; bool:\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n\n        return self._to_dict() == other._to_dict()\n\n    def _to_dict(self, *, ignore_private: bool = True) -&gt; dict[str, Any]:\n        dictionary: dict[str, Any] = {}\n        for key, value in self.__dict__.items():\n            if ignore_private and key.startswith(f\"_{self.__class__.__name__}__\"):\n                continue  # ignore private attributes\n\n            key = key.replace(f\"_{self.__class__.__name__}__\", \"\")\n\n            if key.startswith(\"_\"):\n                key = key[1:]\n\n            dictionary[key] = value\n\n        return dictionary\n\n    @classmethod\n    def from_primitives(cls, primitives: dict[str, Any]) -&gt; Self:\n        if not isinstance(primitives, dict) or not all(\n                isinstance(key, str) for key in primitives\n        ):\n            raise TypeError(f'{cls.__name__} primitives &lt;&lt;&lt;{primitives}&gt;&gt;&gt; must be a dictionary of strings. Got &lt;&lt;&lt;{type(primitives).__name__}&gt;&gt;&gt; type.')  # noqa: E501  # fmt: skip\n\n        constructor_signature = signature(obj=cls.__init__)\n        parameters: dict[str, Parameter] = {parameter.name: parameter for parameter in constructor_signature.parameters.values() if parameter.name != 'self'}  # noqa: E501  # fmt: skip\n        missing = {name for name, parameter in parameters.items() if parameter.default is _empty and name not in primitives}  # noqa: E501  # fmt: skip\n        extra = set(primitives) - parameters.keys()\n\n        if missing or extra:\n            cls._raise_value_constructor_parameters_mismatch(\n                primitives=set(primitives), missing=missing, extra=extra\n            )\n\n        return cls(**primitives)\n\n    @classmethod\n    def _raise_value_constructor_parameters_mismatch(\n            cls,\n            primitives: set[str],\n            missing: set[str],\n            extra: set[str],\n    ) -&gt; None:\n        primitives_names = \", \".join(sorted(primitives))\n        missing_names = \", \".join(sorted(missing))\n        extra_names = \", \".join(sorted(extra))\n\n        raise ValueError(f'{cls.__name__} primitives &lt;&lt;&lt;{primitives_names}&gt;&gt;&gt; must contain all constructor parameters. Missing parameters: &lt;&lt;&lt;{missing_names}&gt;&gt; and extra parameters: &lt;&lt;&lt;{extra_names}&gt;&gt;&gt;.')  # noqa: E501  # fmt: skip\n\n    def to_primitives(self) -&gt; dict[str, Any]:\n        primitives = self._to_dict()\n        for key, value in primitives.items():\n            if isinstance(value, Aggregate) or hasattr(value, \"to_primitives\"):\n                value = value.to_primitives()\n\n            elif isinstance(value, Enum):\n                value = value.value\n\n            elif isinstance(value, ValueObject) or hasattr(value, \"value\"):\n                value = value.value\n\n                if isinstance(value, Enum):\n                    value = value.value\n\n            primitives[key] = value\n\n        return primitives\n</code></pre> <p>A base value object class that will automatically be able to gather all methods decorated with <code>@validate</code> to be able to validate any pre-condition of the value object. This class is also configured to be immutable, meaning that once initialized, the value cannot be changed.</p> Base ValueObject <pre><code>class ValueObject[T](ABC):\n    __slots__ = (\"_value\",)\n    __match_args__ = (\"_value\",)\n\n    _value: T\n\n    def __init__(self, value: T) -&gt; None:\n        self._validate(value)\n        object.__setattr__(self, \"_value\", value)\n\n    def _validate(self, value: T) -&gt; None:\n        \"\"\"Gets all methods decorated with @validate and calls them to validate all domain conditions.\"\"\"\n        validators: list[Callable[[T], None]] = []\n        for cls in reversed(self.__class__.__mro__):\n            if cls is object:\n                continue\n            for name, member in cls.__dict__.items():\n                if getattr(member, \"_is_validator\", False):\n                    validators.append(getattr(self, name))\n\n        for validator in validators:\n            validator(value)\n\n    @property\n    def value(self) -&gt; T:\n        return self._value\n\n    @override\n    def __eq__(self, other: Self) -&gt; bool:\n        return self.value == other.value\n\n    @override\n    def __repr__(self) -&gt; str:\n        return f\"{self.__class__.__name__}({self._value!r})\"\n\n    @override\n    def __str__(self) -&gt; str:\n        return str(self._value)\n\n    @override\n    def __setattr__(self, name: str, value: T) -&gt; None:\n        \"\"\"Prevents modification of the value after initialization.\"\"\"\n        if name in self.__slots__:\n            raise AttributeError(\"Cannot modify the value of a ValueObject\")\n\n        public_name = name.replace(\"_\", \"\")\n        public_slots = [slot.replace(\"_\", \"\") for slot in self.__slots__]\n        if public_name in public_slots:\n            raise AttributeError(\"Cannot modify the value of a ValueObject\")\n\n        raise AttributeError(\n            f\"Class {self.__class__.__name__} object has no attribute '{name}'\"\n        )\n</code></pre> <p>Some common value objects that will be placed at usables folder.</p> UUID <pre><code>class Uuid(ValueObject[str]):\n    @validate\n    def _ensure_has_value(self, value: str) -&gt; None:\n        if value is None:\n            raise RequiredValueError\n\n    @validate\n    def _ensure_value_is_string(self, value: str) -&gt; None:\n        if not isinstance(value, str):\n            raise IncorrectValueTypeError(value)\n\n    @validate\n    def _ensure_value_has_valid_uuid_format(self, value: str) -&gt; None:\n        try:\n            UUID(value)\n        except ValueError:\n            raise InvalidIdFormatError\n</code></pre> StringValueObject <pre><code>class StringValueObject(ValueObject[str]):\n    @validate\n    def _ensure_has_value(self, value: str) -&gt; None:\n        if value is None:\n            raise RequiredValueError\n\n    @validate\n    def _ensure_is_string(self, value: str) -&gt; None:\n        if not isinstance(value, str):\n            raise IncorrectValueTypeError(value)\n</code></pre> IntValueObject <pre><code>class IntValueObject(ValueObject[int]):\n    @validate\n    def _ensure_has_value(self, value: int) -&gt; None:\n        if value is None:\n            raise RequiredValueError\n\n    @validate\n    def _ensure_value_is_integer(self, value: int) -&gt; None:\n        if not isinstance(value, int):\n            raise IncorrectValueTypeError(value)\n\n    @validate\n    def _ensure_value_is_positive(self, value: int) -&gt; None:\n        if value &lt; 0:\n            raise InvalidNegativeValueError(value)\n</code></pre> <p>Along with these value objects, it will include a base exception class that you can use to create your own exceptions and some common exceptions that you can use in your project:</p> Base Error <pre><code>class Error(Exception, ABC):\n    def __init__(self, message: str, error_type: str) -&gt; None:\n        self._message = message\n        self._type = error_type\n        super().__init__(self._message)\n\n    @property\n    def type(self) -&gt; str:\n        return self._type\n\n    @property\n    def message(self) -&gt; str:\n        return self._message\n\n    def to_primitives(self) -&gt; dict[str, str]:\n        return {\n            \"type\": self.type,\n            \"message\": self.message,\n        }\n</code></pre> Domain Error <pre><code>class DomainError(Error):\n    ...\n</code></pre> IncorrectValueTypeError <pre><code>T = TypeVar(\"T\")\n\n\nclass IncorrectValueTypeError(DomainError):\n    def __init__(self, value: T) -&gt; None:\n        self._message = f\"Value '{value}' is not of type {type(value).__name__}\"\n        self._type = \"incorrect_value_type\"\n        super().__init__(message=self._message, error_type=self._type)\n</code></pre> InvalidIdFormatError <pre><code>class InvalidIdFormatError(DomainError):\n    def __init__(self) -&gt; None:\n        self._message = \"User id must be a valid UUID\"\n        self._type = \"invalid_id_format\"\n        super().__init__(message=self._message, error_type=self._type)\n</code></pre> InvalidNegativeValueError <pre><code>class InvalidNegativeValueError(DomainError):\n    def __init__(self, value: int) -&gt; None:\n        self._message = f\"Invalid negative value: {value}\"\n        self._type = \"invalid_negative_value\"\n        super().__init__(message=self._message, error_type=self._type)\n</code></pre> RequiredValueError <pre><code>class RequiredValueError(DomainError):\n    def __init__(self) -&gt; None:\n        self._message = \"Value is required, can't be None\"\n        self._type = \"required_value\"\n        super().__init__(message=self._message, error_type=self._type)\n</code></pre>"},{"location":"guide/command_init/#makefile","title":"Makefile","text":"<p>A Makefile is a common tool to run tasks in your project. This feature is specially useful when automating tasks and avoid remembering all the commands.</p> <p>Warning</p> <p>If you are running <code>instant-python</code> in a Windows environment, the Makefile will not work out of the box. You would need to install a tool like GNU Make for Windows or use a different task runner.</p> <p>The default Makefile will include the following commands:</p> Command Description <code>make help</code> Show available commands <code>make local-setup</code> Set up the local development environment <code>make install</code> Install all dependencies <code>make update</code> Update all dependencies <code>make add-dep</code> Add a new dependency <code>make remove-dep</code> Remove a dependency <code>make test</code> Run all tests <code>make unit</code> Run all unit tests <code>make integration</code> Run all integration tests <code>make acceptance</code> Run all acceptance tests <code>make coverage</code> Run coverage tests <code>make watch</code> Run tests in watch mode <code>make check-typing</code> Runs type checker <code>make check-lint</code> Checks lint code with Ruff <code>make lint</code> Fixes lint errors code with Ruff <code>make check-format</code> Checks format code with Ruff <code>make format</code> Format code with Ruff <code>make secrets</code> Analyzes source code for leakage of secrets <code>make audit</code> Identifies vulnerabilities in dependencies <code>make clean</code> Cleans up the project metadata files <code>make show</code> Show all installed dependencies <code>make search</code> Show details of a specific package <p>Info</p> <p>The commands <code>unit</code>, <code>integration</code> and <code>acceptance</code> are defined based on the assumption that you will mark your tests with  the <code>@pytest.mark.unit</code>, <code>@pytest.mark.integration</code> and <code>@pytest.mark.acceptance</code> decorators. If this is not your case, you change the commands as needed in the Makefile to match your test structure.</p> <p>Some of these commands will be added only based on the features and/or dependencies you set in the configuration file:</p> Command Condition <code>make test</code> If <code>pytest</code> is install or if either <code>makefile</code> or <code>github_actions</code> built in features are selected <code>make unit</code> If <code>pytest</code> is install or if either <code>makefile</code> or <code>github_actions</code> built in features are selected <code>make integration</code> If <code>pytest</code> is install or if either <code>makefile</code> or <code>github_actions</code> built in features are selected <code>make acceptance</code> If <code>pytest</code> is install or if either <code>makefile</code> or <code>github_actions</code> built in features are selected <code>make coverage</code> If <code>pytest</code> is install or if either <code>makefile</code> or <code>github_actions</code> built in features are selected <code>make watch</code> If <code>pytest-watch</code> is install <code>make check-lint</code> If <code>ruff</code> is install or if either <code>makefile</code> or <code>github_actions</code> built in features are selected <code>make lint</code> If <code>ruff</code> is install or if either <code>makefile</code> or <code>github_actions</code> built in features are selected <code>make check-format</code> If <code>ruff</code> is install or if either <code>makefile</code> or <code>github_actions</code> built in features are selected <code>make format</code> If <code>ruff</code> is install or if either <code>makefile</code> or <code>github_actions</code> built in features are selected <code>make secrets</code> If <code>precommit_hook</code> built in feature is selected <code>make audit</code> If <code>github_actions</code> built in feature is selected"},{"location":"guide/command_init/#github-actions-and-workflows","title":"GitHub actions and workflows","text":"<p>Info</p> <p>When selecting this feature, by default, the library will include <code>mypy</code> as a type checker, <code>ruff</code> as a linter and formatter, and <code>pytest</code> as a test runner. If you want to use different tools, you can change them later in the workflow file.</p> <p>A common feature in projects is to have a CI/CD pipeline that will run some tasks. This option will include the following:</p> <ul> <li>A GitHub action that will set up your Python environment in your pipeline using the dependency manager you selected.</li> <li>A workflow that will check linting, formatting, and statyc analysis of your code. Make an analysis of your code quality, audit your dependencies, analyze for any leakage of secrets and run all tests generating a coverage report.</li> <li>A workflow that will create a new version tag for your project, update a CHANGELOG.md file and generates a new release in GitHub using <code>semantic-release</code>. You can get a deeper understanding of this workflow in the releases section.</li> </ul> <p>Info</p> <p>Some of the steps in this workflow uses some of the make commands presented in the previous section.</p>"},{"location":"guide/command_init/#github-issues-templates","title":"GitHub Issues Templates","text":"<p>This feature will include two GitHub issues templates that you can use to create issues in your project:</p> <ul> <li>A bug report template that will help you to report bugs in your project.</li> <li>A feature request template that will help you to request new features in your project.</li> </ul>"},{"location":"guide/command_init/#logger","title":"Logger","text":"<p>Logging messages in an application it's a common task.</p> <p>This boilerplate will include a basic logger that creates a handler for production with logging ERROR level and a handler for development with logging DEBUG level. These handlers will be logging messages into a file that will be rotated every day.</p> <p>It will also include a json formatter that formats the message with the time the logg was made, the level, the name or title of the message and the message itself.</p>"},{"location":"guide/command_init/#fastapi","title":"FastAPI","text":"<p>FastAPI has become one of the most popular frameworks to create APIs in Python. This boilerplate will include:</p> <ul> <li>A main file where the FastAPI is created</li> <li>Two error handlers configured, one that captures unexpected errors that will raise a 500 status code, and another  handler that catches <code>DomainError</code> instances and raises a 400 status code by default.</li> <li>When logger built-in feature is selected, it will include a middleware that will log all requests and a handler to be able to log Pydantic validation errors.</li> <li>A lifespan that will execute the migrations with alembic when the application starts.</li> <li>A decoupled implementation to model your success and error responses.</li> </ul>"},{"location":"guide/command_init/#asynchronous-sql-alchemy","title":"Asynchronous SQL Alchemy","text":"<p>SQL Alchemy is a popular ORM for Python, and with the introduction of async and await in Python, it has become a powerful tool to manage databases. This boilerplate will include:</p> <ul> <li>A basic implementation of a repository pattern that will allow you to create a repository for each entity in your project.</li> <li>A class to encapsulate postgres settings</li> </ul>"},{"location":"guide/command_init/#asynchronous-migrations","title":"Asynchronous migrations","text":"<p>Along with SQL Alchemy it's typical to use Alembic to manage database migrations. This boilerplate will include everything needed to configure the migrations and run them asynchronously.</p>"},{"location":"guide/command_init/#event-bus","title":"Event bus","text":"<p>In complex applications, it's common to use an event bus to communicate between different parts of the application. This boilerplate will set up a decoupled implementation of an event bus using RabbitMQ. This implementation will include:</p> <ul> <li> <p>An <code>EventAggregate</code> class that will allow you to create your aggregates and publish events automatically.</p> EventAggregate <pre><code>class EventAggregate(Aggregate):\n    _domain_events: list[DomainEvent]\n\n    def __init__(self) -&gt; None:\n        self._domain_events = []\n\n    def record(self, event: DomainEvent) -&gt; None:\n        self._domain_events.append(event)\n\n    def pull_domain_events(self) -&gt; list[DomainEvent]:\n        recorded_domain_events = self._domain_events\n        self._domain_events = []\n\n        return recorded_domain_events\n</code></pre> </li> <li> <p>Modeled domain events that will be published through the event bus.</p> </li> <li>Interface for the event bus and subscriber.</li> <li>Concrete implementation of the event bus using RabbitMQ</li> </ul>"},{"location":"guide/command_init/#precommit-hooks","title":"Precommit hooks","text":"<p>Precommit hooks are a great way to ensure that your code is always in a good state before committing it to the repository.</p> <p>This boilerplate will include a precommit hook that will run the following tasks before committing your code:</p> <ul> <li>Check for any large files that should not be committed to the repository.</li> <li>Check for files that have the same name but only differ in case, which can cause issues in some file systems.</li> <li>Check the format of toml and yaml files</li> <li>Check for any merge conflicts that have not been resolved.</li> <li>Check for any secrets that have been leaked in the code.</li> <li>Check for the format of commit messages, ensuring they follow the conventional commit format.</li> </ul> <p>Additionally, it will include two pre-push hooks:</p> <ul> <li>One that will check for any linting error</li> <li>One to check for any formatting error</li> </ul>"},{"location":"guide/command_init/#security-file","title":"Security file","text":"<p>This feature will include a SECURITY.md file that will help the users of your project to report security issues in your project. It will include:</p> <ul> <li>Steps explaining how to report security issues.</li> <li>How we will handle security issues and disclosure.</li> </ul>"},{"location":"guide/command_init/#citation-file","title":"Citation file","text":"<p>When working on open source projects, it's common to include a CITATION.cff file that will  allow users to cite your project when using it in their research or projects.</p> <p>This feature will include a CITATION.cff file that will help users to cite your project.</p>"},{"location":"guide/command_init/#using-custom-template","title":"Using custom template","text":"<p>You can create a new project using a custom template instead of one of the default templates.</p> <p>Important</p> <p>When using a custom template, the possibility of using out-of-the-box implementations is not available.</p> <p>This custom template must follow a specific structure and syntax to be able to generate the project correctly.</p> <ul> <li>You must use a yml file to define the folder structure.</li> <li>The hierarchy of your project will be declared as a list of elements with the following structure:<ul> <li><code>name</code>: The name of the folder or file to create.</li> <li><code>type</code>: The type of the element, which can be <code>directory</code> or <code>file</code>.</li> <li><code>python</code>: Only for directories. Set its value to True if the directory is a python module to include the <code>__init__.py</code> file, otherwise   ignore this field.</li> <li><code>extension</code>: Only for files. The extension of the file to create. If the file do not have an extension, you can ignore   this field.</li> <li><code>children</code>: A list of elements that will be created inside the folder. This can be either another directory or files.</li> </ul> </li> </ul>"},{"location":"home/","title":"Instant Python","text":"Fast, easy and reliable project generator for your Python projects. Instant Python replaces extensive manual setup with a simple command to get started quickly. Its motivation is to emulate commands like `ng new` or `create-react-app`, but for Python projects.   Why use Instant Python? Generating your Python project with Instant Python lets you:  <ul> <li>\u23f1\ufe0f Slash folder &amp; config setup time to seconds</li> <li>\ud83d\udc0d Instantly install &amp; switch between any Python version</li> <li>\ud83d\udd27 Effortlessly configure your favorite project manager</li> <li>\ud83d\udcc1 Kickstart with ready-made or fully custom project structures</li> <li>\ud83d\udd04 Initialize a Git repo in just a few clicks</li> <li>\ud83d\udce6 Auto-install all your go-to dependencies</li> <li>\ud83d\ude80 Ship with production-ready boilerplates out of the box</li> </ul>"},{"location":"home/#documentation","title":"Documentation","text":"<p>This section provides a high-level overview of the <code>instant-python</code> library, its features, and how to get started.  For detailed instructions and examples, please refer to the Commands documentation.</p> <ul> <li>Installation</li> <li>Getting Started</li> <li>Examples</li> </ul>"},{"location":"home/#need-help","title":"Need help?","text":"<ul> <li>Join a discussion \ud83d\udcac on GitHub Discussions</li> <li>Raise an issue on GitHub</li> </ul>"},{"location":"home/#installation","title":"Installation","text":"<p>The latest version of <code>instant-python</code> can be installed from PyPI:</p> <pre><code>pip install instant-python\n</code></pre> <p>Tip</p> <p>We highly recommend using a virtual environment to avoid conflicts with other Python packages.</p>"},{"location":"home/#requirements","title":"Requirements","text":"<p>Instant Python tries to support the latest Python versions, we officially support from Python 3.10 to 3.13. Older versions of Python may work, but they are not guaranteed to be compatible.</p>"},{"location":"home/#contributing","title":"Contributing","text":"<p>We welcome contributions to <code>instant-python</code>! If you have ideas, suggestions, or improvements, please check out our contributing guide for details on how to get involved.</p>"},{"location":"home/contributing/","title":"Contributing","text":"<p>First off, thank you for wanting to improve Instant Python package! Whether you're fixing a typo or building a whole new feature, your help makes the library better for everyone.</p>"},{"location":"home/contributing/#before-you-start","title":"Before You Start","text":"<ol> <li>Search first: check for existing issues before opening a new one. You might     find that your issue has already been reported or even fixed in a pull request.</li> <li>Security issues: report privately via our <code>Security Policy</code>; do not raise a public issue for vulnerabilities.</li> </ol>"},{"location":"home/contributing/#start-contributing","title":"Start Contributing","text":"<p>Info</p> <p>All examples assume you are using a UNIX system with <code>GNU Make</code> installed. For more information about the Makefile, see the Tooling section.</p>"},{"location":"home/contributing/#common-steps","title":"Common Steps","text":"<p>All contributions have some common steps, whether you're fixing a bug, adding a feature, or improving documentation.</p> <ol> <li> <p>Fork the Repository: Click the fork button on the repository page.</p> </li> <li> <p>Clone Your Fork:</p> <pre><code>git clone git+ssh://git@github.com/&lt;your-username&gt;/instant-python.git\n</code></pre> </li> <li> <p>Setup the Development Environment: Create a virtual environment, install all dependencies, and setup custom pre-commit hooks.</p> <pre><code>make local-setup\n</code></pre> </li> <li> <p>Create a Feature Branch: Create a feature branch from the <code>main</code> branch.</p> <pre><code>git switch -c feat/&lt;branch-name&gt;\n</code></pre> </li> </ol>"},{"location":"home/contributing/#contributing-with-code","title":"Contributing with Code","text":"<p>If you want to implement a new feature, fix a bug, or improve the codebase, it's time to get your hands dirty!</p> <ol> <li> <p>Time to Code: Make your changes.</p> </li> <li> <p>Quality Checks: Run the following commands to ensure your code is formatted, linted, and passes the test suite.</p> <pre><code>make format\nmake lint\nmake test\n</code></pre> </li> <li> <p>Commit Your Changes: Commit your changes with a descriptive commit message.</p> <p>Info</p> <p>More information about our commit message guidelines can be found in the Commit Message Guidelines section.</p> <pre><code>git add .\ngit commit -m \"feat(configuration): implement validation of general information section\" -S --signoff  # we only accept signed and signed-off commits\n</code></pre> </li> <li> <p>Push Your Changes: Push your changes to your fork.</p> <pre><code>git push -u origin feat/&lt;branch-name&gt;\n</code></pre> </li> <li> <p>Open a Pull Request: Open a pull request against the <code>main</code> branch and fill out our <code>pull request template</code>.</p> <p>Info</p> <p>More information about our pull request guidelines and feedback can be found in the Pull Request Guidelines section.</p> </li> </ol>"},{"location":"home/contributing/#contributing-with-documentation","title":"Contributing with Documentation","text":"<p>If you want to contribute to the documentation, you can do so by editing the Markdown files in the <code>docs</code> directory.  The documentation is built using MkDocs and can be previewed locally running the following command:</p> <pre><code>make docs-serve\n</code></pre> <p>Once you have made your changes, you can follow these steps to contribute:</p> <ol> <li> <p>Commit Your Changes: Commit your changes with a descriptive commit message.</p> <p>Info</p> <p>More information about our commit message guidelines can be found in the Commit Message Guidelines section.</p> <pre><code>git add .\ngit commit -m \"feat(configuration): implement validation of general information section\" -S --signoff  # we only accept signed and signed-off commits\n</code></pre> </li> <li> <p>Push Your Changes: Push your changes to your fork.</p> <pre><code>git push -u origin feat/&lt;branch-name&gt;\n</code></pre> </li> <li> <p>Open a Pull Request: Open a pull request against the <code>main</code> branch and fill out our <code>pull request template</code>.</p> <p>Info</p> <p>More information about our pull request guidelines and feedback can be found in the Pull Request Guidelines section.</p> </li> </ol> <p></p>"},{"location":"home/contributing/#commit-message-guidelines","title":"Commit Message Guidelines","text":"<p>This project follows Conventional Commits enforced by  Commitizen as a pre-commit hook and  Semantic Versioning used by python-semantic-release.</p> <p>Info</p> <p>More information about versioning and releases can be found in the Releases page.</p> <p>Important</p> <p>This repository only accepts signed and signed-off commits, check GitHub documentation if you need help with that.</p>"},{"location":"home/contributing/#how-to-write-a-good-commit-message","title":"How to Write a Good Commit Message","text":"<ul> <li>Structure: Each commit message must consist of a type, an optional scope, and a concise description (e.g., <code>feat(template): create template for github action</code>).</li> <li>Types: Common types include:<ul> <li><code>feat</code>: Implementing new code, modifying existing behavior or removing existing code (minor release).</li> <li><code>fix</code>: Bug fix or fix of failing tests due to behavior changes (patch release).</li> <li><code>docs</code>: Documentation update.</li> <li><code>refactor</code>: Code change that modifies existing code without altering its behavior.</li> <li><code>perf</code>: Performance improvement (patch release).</li> <li><code>test</code>: Change related to tests (adding, updating, removing tests).</li> <li><code>build</code>: Changes that affect the build system (new dependencies, tools, ...) (patch release).</li> <li><code>ci</code>: Pipeline changes (GitHub Actions, make commands, ...).</li> </ul> </li> <li>Scope: Use the scope to clarify what part of the codebase is affected (e.g., <code>commands</code>, <code>configuration</code>, <code>project-creator</code>). We specify the first level folders in the scope.</li> <li>Description: Use the imperative mood (\"add\", \"fix\", \"update\", ...; not \"added\", \"fixed\", \"updates\", ...).</li> <li>Body (optional): Explain what and why vs. how. Reference issues if relevant.</li> <li>Breaking Changes: Append <code>!</code> to the commit type or start the body with <code>BREAKING CHANGE:</code> if the commit introduces an API or behavioral change (major release).</li> </ul>"},{"location":"home/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Important</p> <p>Only code owners are allowed to merge a pull request.</p> <ul> <li>Use our <code>pull request template</code>.</li> <li>Keep PRs Focused: Submit one logical change per pull request. Avoid bundling unrelated changes together.</li> <li>Descriptive Titles and Summaries: Use clear, descriptive PR titles and fill out all sections of the PR template, especially the motivation and context.</li> <li>Reference Issues: Link related issues by number (e.g., <code>Closes #123</code>) to enable automatic closing and better tracking.</li> <li>Checklist Completion: Ensure all items in the PR template checklist are addressed before requesting a review.</li> <li>Passing Checks Required: PRs must pass all CI checks (format, lint, tests, coverage, ...) before being considered for review (enforced with branch rules).</li> <li>Request Reviews Thoughtfully: Assign reviewers only after your PR is ready and all checks pass.</li> <li>Rebase or Update: If your branch is behind <code>main</code>, rebase or merge the latest changes before requesting a review (enforced with branch rules).</li> <li>No Force Pushes on Shared Branches: Only force-push to your own feature branches, not shared or open PR branches (enforced with branch rules).</li> <li>Explain Breaking Changes: Clearly highlight any breaking changes in the PR description and label/tag accordingly.</li> <li>Documentation and Tests: Update documentation and tests as needed for your changes.</li> </ul>"},{"location":"home/contributing/#how-to-write-good-feedback","title":"How to Write Good Feedback","text":"<p>We follow Conventional Comments to keep reviews clear and actionable.</p> <ul> <li>Start with a label: praise:, nitpick:, suggestion:, issue:, or question:.</li> <li>Indicate blockers correctly: If the pull request must not be merged until the comment is resolved, add the blocking modifier in parentheses after the label, e.g. issue (blocking):.</li> <li>Be specific: quote the relevant code or line numbers.</li> <li>Stay constructive &amp; courteous: focus on the code, not the coder.</li> <li>Offer alternatives when pointing out issues.</li> </ul> <p></p>"},{"location":"home/contributing/#tooling","title":"Tooling","text":"<p>Important</p> <p>All default project commands require GNU Make and are intended to be run on a UNIX system.</p> <p>Important</p> <p>You must have UV installed to use the most of the default project commands.</p> <p>The project provides a <code>Makefile</code> with some helpful commands,  this commands must be run from the root of the project. For more details on each command, run <code>make help</code>.</p> <ul> <li>Environment Setup: Run <code>make local-setup</code> to create a virtual environment, install all dependencies (development + production), and install pre-commit hooks.</li> <li>Install Dependencies: Run <code>make install</code> to install all dependencies (development + production).</li> <li>Code Formatting: Run <code>make check-format</code> to check for code format issues and <code>make format</code> to automatically format code using Ruff.</li> <li>Linting: Run <code>make check-lint</code> to check code quality using Ruff for static analysis and <code>make lint</code> to automatically fix linting issues.</li> <li>Testing: Run <code>make test</code> to execute all tests.</li> <li>Coverage: Run <code>make coverage</code> to generate a test coverage report.</li> <li>Build: Run <code>make build</code> to build the project.</li> <li>Audit: Run <code>make audit</code> to audit dependencies for known vulnerabilities.</li> <li>Secrets Scanning: Run <code>make secrets</code> to scan for secrets in the hole codebase.</li> <li>Environment Cleanup: Run <code>make clean</code> to remove the virtual environment, caches, and all generated files.</li> </ul> <p>There are some additional commands that can be used during development:</p> <ul> <li>Update Dependencies: Run <code>make update</code> to update all dependencies to their latest versions.</li> <li>Adding / Removing Dependencies: Use <code>make add-dep</code> or <code>make remove-dep</code> to add or remove dependencies from the project.</li> <li>Run test in watch mode: Run <code>make watch</code> to run tests in watch mode, automatically re-running tests when files change.</li> <li>Serve Documentation: Run <code>make docs-serve</code> to serve the documentation locally, allowing you to preview changes in real-time.</li> </ul>"},{"location":"home/contributing/#donating","title":"Donating","text":"<p>If you find this library useful and want to help, you can also give it a star on GitHub or donate in the following link</p> <p></p> <p>Thank you for helping make Instant Python package awesome!</p>"},{"location":"home/getting_started/","title":"Getting Started","text":"<p>To get started with <code>instant-python</code> we would cover some of the basic topics that will allow you to quickly begin using the library.</p> <ul> <li>Installing <code>instant-python</code></li> <li>Overview of available commands</li> <li>Next steps</li> </ul> <p>If you want to go directly to the guides and learn all the possibilities that the library offers, you can check the Commands section.</p>"},{"location":"home/getting_started/#installation","title":"Installation","text":"<p>To ensure a clean and isolated environment, we recommend installing <code>instant-python</code> using a virtual environment. At your own risk, you can install it at your system Python installation, but this is not recommended. Below are the preferred installation methods.</p>"},{"location":"home/getting_started/#using-pipx","title":"Using <code>pipx</code>","text":"<p>The recommended way to install <code>instant-python</code> is using <code>pipx</code>. <code>pipx</code> installs Python applications in isolated environments, ensuring that they do not interfere with other Python applications.</p> <pre><code>pipx install instant-python\n</code></pre> <p>If you do not have <code>pipx</code> installed, you can install it using <code>pip</code>.</p> <pre><code>pip install --user pipx\n</code></pre>"},{"location":"home/getting_started/#using-pyenv","title":"Using <code>pyenv</code>","text":"<p>If you already manage your Python versions using a tool like Pyenv, you can install <code>instant-python</code> using <code>pip</code> with pyenv's global Python version.</p> <pre><code>pip install instant-python\n</code></pre> <p>A guide to install and configure pyenv can be found here</p>"},{"location":"home/getting_started/#features-overview","title":"Features Overview","text":"<p>Once you have installed <code>instant-python</code>, you can check that is available by running:</p> <pre><code>ipy --help\n</code></pre> <p>This will display the help message where you could see the available command and options.</p>"},{"location":"home/getting_started/#create-the-configuration-file","title":"Create the configuration file","text":"<p>With the new version, <code>instant-python</code> delegates all its data to a configuration file. You can create this file manually and fill it with the allowed parameters, or you can use the <code>config</code> command to fill it by an interactive wizard.</p> <ul> <li><code>ipy config</code>: Creates an ipy.yml configuration file in the current directory.</li> </ul>"},{"location":"home/getting_started/#create-a-project","title":"Create a project","text":"<p>Generate a new project using the <code>init</code> command. This command will create a new folder and place all your project files inside it.</p> <ul> <li><code>ipy init</code>: Creates a new project in the current directory using the default configuration file ipy.yml.</li> </ul> <p>If a different file is used or is placed in a different location, you can specify the path to it with the <code>--config</code> or <code>-c</code> option.</p>"},{"location":"home/getting_started/#next-steps","title":"Next steps","text":"<p>Now that you have a basic understanding of how to use <code>instant-python</code> you can advance to the commands  section to learn more about <code>instant-python</code> commands and how to use them in more detail to create your Python projects.</p>"},{"location":"home/releases/","title":"Releases","text":"<p>Instant Python is made available through both GitHub releases and PyPI. The GitHub releases also come  with a summary of changes through a CHANGELOG file, which is automatically generated based on the commit history.</p> <p>The entire process is automated through the release GitHub Action. </p>"},{"location":"home/releases/#versioning","title":"Versioning","text":"<p>Instant Python version is managed automatically through the <code>python-semantic-release</code>  tool, which enforces conventional commit messages.  This tool generates the version number based on the commit history and sets the new version following semantic versioning.</p>"},{"location":"home/releases/#publishing-release-process","title":"Publishing &amp; Release Process","text":"<p>In Instant Python, we work following trunk base development, trying to work always on the <code>main</code> branch. To generate a new version and release of the project, the release workflow has te be triggered manually.</p>"},{"location":"home/releases/#release-step","title":"Release step","text":"<p>When a new version is ready to be released, the release workflow is triggered manually through the GitHub Actions interface.  The very first step of this workflow is responsible for:</p> <ul> <li>Bumping the version number using <code>python-semantic-versioning</code>.</li> <li>Generating a changelog based on the conventional commits since the last release.</li> <li>Creating a new GitHub release with the changelog associated with the new version.</li> </ul>"},{"location":"home/releases/#publish-step","title":"Publish step","text":"<p>Once the release step has been completed successfully, the workflow proceeds:</p> <ul> <li>Build the package using <code>uv</code>.</li> <li>Publish the package to PyPI.</li> </ul>"},{"location":"home/security/","title":"Security Policy","text":"<p>Thank you for helping keep Instant Python package and its users safe. We take security issues seriously and appreciate responsible disclosures.</p>"},{"location":"home/security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Important</p> <p>Please do NOT open public issues for security reports. Use one of the private channels below so we can coordinate a safe disclosure.</p> Channel How it works GitHub Security Advisory 1. Navigate to the repository's \u201cSecurity \u2192 Advisories\u201d tab2. Click \u201cReport a vulnerability\u201d and fill in the form <p>Include the following, if possible:</p> <ol> <li>A concise description of the issue and its impact.</li> <li>Reproduction steps or a proof-of-concept script.</li> <li>Any mitigation ideas you've identified.</li> </ol>"},{"location":"home/security/#our-disclosure-process","title":"Our Disclosure Process","text":"<ol> <li>Acknowledge report within 24\u201348 hours.</li> <li>Triage &amp; validate the issue; request additional info if needed.</li> <li>Fix &amp; prepare: develop a patch and regression tests.</li> <li>Coordinate release:<ul> <li>Agree on a disclosure date with the reporter (usually \u2264 30 days).</li> <li>Publish a CVE (if applicable) and a new PyPI release.</li> <li>Post a security advisory and update CHANGELOG.</li> </ul> </li> <li>Credit the reporter (optional &amp; with consent).</li> </ol>"},{"location":"home/security/#responsible-disclosure","title":"Responsible Disclosure","text":"<p>We kindly ask you to:</p> <ul> <li>Allow us reasonable time to remediate before any public disclosure.</li> <li>Avoid violating user privacy, destroying data, or disrupting production services while researching.</li> <li>Test only on your own instances or in minimal, isolated cases.</li> </ul> <p>We are committed to keeping this project and its users safe and will strive to resolve all legitimate reports swiftly and transparently.</p> <p>Thank you for keeping the Instant Python package community secure!</p>"}]}