name: Run lint, format and tests

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  check_user:
    name: check-user
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ github.actor == 'dimanu-py' }}
    steps:
      - name: 🛡️ Harden runner
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: 👍 Check triggering user
        run: echo "Workflow triggered by ${{ github.actor }}"

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: check_user
    if: ${{ needs.check_user.outputs.should_run == 'true' }}
    steps:
      - name: 🛡️ Harden runner
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: 📥 Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: 🛠️ Setup environment
        uses: ./.github/actions/python_setup

      - name: 🧐 Check linting
        id: check_lint
        run: |
          git pull --rebase origin main
          uvx ruff check --exclude "instant_python/templates,instant_python/new_templates" instant_python test
        continue-on-error: true

      - name: 🚨 Auto fix lint errors
        id: fix_lint
        if: ${{ steps.check_lint.outcome == 'failure' }}
        run: |
          git pull --rebase origin main
          uvx ruff check --fix --exclude "instant_python/templates,instant_python/templates" instant_python test

      - name: ✏️ Commit lint fixes
        if: ${{ steps.fix_lint.outcome == 'success' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet; then
            echo "No changes to commit."
          else
            git add .
            git commit -m "🚨 chore: fix linting issues via GitHub Actions"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧐 Check linting again
        run: uvx ruff check --exclude "instant_python/templates,instant_python/templates" instant_python test

  format:
    name: format
    runs-on: ubuntu-latest
    needs: check_user
    if: ${{ needs.check_user.outputs.should_run == 'true' }}
    steps:
      - name: 🛡️ Harden runner
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: 📥 Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: 🛠️ Setup environment
        uses: ./.github/actions/python_setup

      - name: 🧐 Check code format
        id: check_format
        run: |
          git pull --rebase origin main
          uvx ruff format --check --exclude "instant_python/templates,instant_python/new_templates" instant_python test
        continue-on-error: true

      - name: 🎨 Auto format code
        id: format_code
        if: ${{ steps.check_format.outcome == 'failure' }}
        run: |
          git pull --rebase origin main
          uvx ruff format --exclude "instant_python/templates,instant_python/templates" instant_python test

      - name: ✏️ Commit formatted code
        if: ${{ steps.format_code.outcome == 'success' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet; then
            echo "No changes to commit."
          else
            git add .
            git commit -m "🎨 style: format code via GitHub Actions"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧐 Check code format again
        run: uvx ruff format --check --exclude "instant_python/templates,instant_python/templates" instant_python test
